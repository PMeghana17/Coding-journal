Maximum Product Subarray
Given an integer array, the task is to find the maximum product of any subarray.

Examples:

Input: arr[] = {-2, 6, -3, -10, 0, 2}
Output: 180
Explanation: The subarray with maximum product is {6, -3, -10} with product = 6 * (-3) * (-10) = 180

Input: arr[] = {-1, -3, -10, 0, 60}
Output: 60
Explanation: The subarray with maximum product is {60}.

Table of Content

[Naive Approach] By using two nested loops – O(n^2) Time and O(1) Space
[Expected Approach 1] Using minimum and maximum product ending at any index - O(n) Time and O(1) Space
[Expected Approach 2] By traversing in both directions - O(n) Time and O(1) Space
[Naive Approach] By using two nested loops – O(n^2) Time and O(1) Space
The idea is to traverse over every contiguous subarray, find the product of 
each of these subarrays and return the maximum product among all the subarrays.




1
// Java program to find Maximum Product Subarray using 
2
// nested loops
3
​
4
import java.io.*;
5
​
6
class GfG {
7
  
8
    // Function to return the product of max product subarray
9
    static int maxProduct(int arr[]) { 
10
        int n = arr.length;
11
      
12
        // Initializing result
13
        int result = arr[0];
14
​
15
        for (int i = 0; i < n; i++) {
16
            int mul = 1;
17
          
18
            // traversing in current subarray
19
            for (int j = i; j < n; j++) {
20
                mul *= arr[j];
21
              
22
                // updating result every time
23
                // to keep track of the maximum product
24
                result = Math.max(result, mul);
25
            }
26
        }
27
        return result;
28
    }
29
​
30
    public static void main(String[] args) {
31
        int arr[] = { -2, 6, -3, -10, 0, 2 };
32
        System.out.println(maxProduct(arr));
33
    }
34
}

Output
180
Time Complexity: O(n^2), where n is the size of array.
Auxiliary Space: O(1)

[Expected Approach 1] Using minimum and maximum product ending at any index - O(n) Time and O(1) Space
Let's assume that the input array has only positive elements. Then, we can simply iterate from left to right keeping track of the maximum running product ending at any index.
The maximum product would be the product ending at the last index. The problem arises when we encounter zero or a negative element.

If we encounter zero, then all the subarrays containing this zero will have product = 0, so zero simply resets the product of the subarray.
If we encounter a negative number, we need to keep track of the minimum product as well as the maximum product ending at the previous index. 
This is because when we multiply the minimum product with a negative number, it can give us the maximum product. 
So, keeping track of minimum product ending at any index is important as it can lead to the maximum product on encountering a negative number.
Step-by-step algorithm:

Create 3 variables, currMin, currMax and maxProd initialized to the first element of the array.
Iterate the indices 0 to N-1 and update the variables:
currMax = maximum(arr[i], currMax * arr[i], currMin * arr[i])
currMin= minimum(arr[i], currMax * arr[i], currMin * arr[i])
update the maxProd with the maximum value for each index.
Return maxProd as the result.



1
// Java program to find Maximum Product Subarray using Minimum
2
// and Maximum Product ending at every index
3
​
4
class GfG {
5
    static int max(int a, int b, int c) {
6
        return Math.max(a, Math.max(b, c));
7
    }
8
​
9
    static int min(int a, int b, int c) {
10
        return Math.min(a, Math.min(b, c));
11
    }
12
​
13
    // Function to find the product of max product subarray
14
    static int maxProduct(int[] arr) {
15
        int n = arr.length;
16
​
17
        // max product ending at the current index
18
        int currMax = arr[0];
19
​
20
        // min product ending at the current index
21
        int currMin = arr[0];
22
​
23
        // Initialize overall max product
24
        int maxProd = arr[0];
25
​
26
        // Iterate through the array
27
        for (int i = 1; i < n; i++) {
28
            
29
            // Temporary variable to store the maximum product ending 
30
            // at the current index
31
            int temp = max(arr[i], arr[i] * currMax, arr[i] * currMin);
32
​
33
            // Update the minimum product ending at the current index
34
            currMin = min(arr[i], arr[i] * currMax, arr[i] * currMin);
35
​
36
            // Update the maximum product ending at the current index
37
            currMax = temp;
38
            
39
            // Update the overall maximum product
40
            maxProd = Math.max(maxProd, currMax);
41
        }
42
​
43
        return maxProd;
44
    }
45
​
46
    public static void main(String[] args) {
47
        int[] arr = { -2, 6, -3, -10, 0, 2 };
48
        System.out.println(maxProduct(arr));
49
    }
50
}

Output
180
Working:
Maximum-Product-Subarray-4.webpMaximum-Product-Subarray-4.webp

Complexity Analysis:

Time Complexity: O(n), where n is the size of input array.
Auxiliary Space: O(1)
[Expected Approach 2] By traversing in both directions - O(n) Time and O(1) Space
We will follow a simple approach that is to traverse from the start and keep track of the running product and if the running product
is greater than the max product, then we update the max product. Also, if we encounter '0' then make product of all elements till now equal to 1 because from the next element,
we will start a new subarray.

But what is the problem with this approach?

Problem will occur when our array will contain odd no. of negative elements. 
In that case, we have to reject one negative element so that we can even no. of negative elements and their product can be positive.
Now, since subarray should be contiguous so we can't simply reject any one negative element.
We have to either reject the first negative element or the last negative element.

Now, if we traverse from start then only the last negative element can be rejected and if we traverse from the last then the first negative element can be rejected.
So we will traverse from both ends and find the maximum product subarray.




1
// Java program to find Maximum Product Subarray using 
2
// Traversal From Starting and End of an Array
3
​
4
class GfG {
5
​
6
    // function to find the product of max product subarray
7
    static long maxProduct(int[] arr) {
8
        int n = arr.length;
9
        int maxProd = Integer.MIN_VALUE;
10
  
11
        // leftToRight to store product from left to Right
12
        int leftToRight = 1;
13
  
14
        // rightToLeft to store product from right to left
15
        int rightToLeft = 1;
16
  
17
        for (int i = 0; i < n; i++) {
18
            if (leftToRight == 0)
19
                leftToRight = 1;
20
            if (rightToLeft == 0)
21
                rightToLeft = 1;
22
      
23
            // calculate product from index left to right
24
            leftToRight *= arr[i];
25
      
26
            // calculate product from index right to left
27
            int j = n - i - 1;
28
            rightToLeft *= arr[j];
29
            maxProd = Math.max(leftToRight, 
30
                            Math.max(rightToLeft, maxProd));
31
        }
32
        return maxProd;
33
    }
34
​
35
    public static void main(String[] args) {
36
        int[] arr = { -2, 6, -3, -10, 0, 2 };
37
        System.out.println(maxProduct(arr));
38
    }
39
}

Output
180
Working:
Maximum-Product-Subarray-22.webpMaximum-Product-Subarray-22.webp


Complexity Analysis:

Time Complexity: O(n), where n is the size of input array.
Auxiliary Space: O(1)
