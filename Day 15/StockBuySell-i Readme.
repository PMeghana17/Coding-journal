Stock Buy and Sell - Max one Transaction Allowed
Given an array prices[] of length N, representing the prices of the stocks on different days, 
the task is to find the maximum profit possible by buying and selling the stocks on different days when at most one transaction is allowed. 
Here one transaction means 1 buy + 1 Sell.

Note: Stock must be bought before being sold.

Examples:

Input: prices[] = {7, 10, 1, 3, 6, 9, 2}
Output: 8
Explanation: Buy for price 1 and sell for price 9.

Input: prices[] = {7, 6, 4, 3, 1} 
Output: 0
Explanation: Since the array is sorted in decreasing order, 0 profit can be made without making any transaction.

Input: prices[] = {1, 3, 6, 9, 11} 
Output: 10
Explanation: Since the array is sorted in increasing order, we can make maximum profit by buying at price[0] and selling at price[n-1]

Table of Content

[Naive Approach] By exploring all possible pairs - O(n^2) Time and O(1) Space
[Expected Approach] One Traversal Solution - O(n) Time and O(1) Space
[Naive Approach] By exploring all possible pairs - O(n^2) Time and O(1) Space
The idea is to use two nested loops to explore all the possible ways to buy and sell stock. 
The outer loop decides the day to buy the stock and the inner loop decides the day to sell the stock. 
The maximum difference between the selling price and buying price between every pair of days will be our answer.




1
// Java Program to solve stock buy and sell by  
2
// exploring all possible pairs
3
​
4
class GfG {
5
​
6
    static int maxProfit(int[] prices) {
7
        int n = prices.length;
8
        int res = 0;
9
​
10
        // Explore all possible ways to buy and sell stock
11
        for (int i = 0; i < n - 1; i++) {
12
            for (int j = i + 1; j < n; j++) {
13
                res = Math.max(res, prices[j] - prices[i]);
14
            }
15
        }
16
        return res;
17
    }
18
​
19
    public static void main(String[] args) {
20
        int[] prices = {7, 10, 1, 3, 6, 9, 2};
21
        System.out.println(maxProfit(prices));
22
    }
23
}

Output
8
[Expected Approach] One Traversal Solution - O(n) Time and O(1) Space
In order to maximize the profit, we need to minimize the cost price and maximize the selling price.
So at every step, we keep track of the minimum buy price of stock encountered so far. 
For every price, we subtract with the minimum so far and if we get more profit than the current result, we update the result.




1
// Java Program to solve stock buy and sell
2
// using one traversal
3
​
4
import java.util.ArrayList;
5
import java.util.List;
6
​
7
class GfG {
8
​
9
    static int maxProfit(int[] prices) {
10
        int minSoFar = prices[0];
11
        int res = 0;
12
​
13
        // Update the minimum value seen so far
14
        // if we see smaller
15
        for (int i = 1; i < prices.length; i++) {
16
            minSoFar = Math.min(minSoFar, prices[i]);
17
           
18
            // Update result if we get more profit                
19
            res = Math.max(res, prices[i] - minSoFar);
20
        }
21
        return res;
22
    }
23
​
24
    public static void main(String[] args) {
25
        int[] prices = {7, 10, 1, 3, 6, 9, 2};
26
        System.out.println(maxProfit(prices));
27
    }
28
}

Output
8
Time Complexity: O(n), as we are traversing the prices[] array only once.
Auxiliary Space: O(1)
