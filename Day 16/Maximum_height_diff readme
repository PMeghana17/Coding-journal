Minimize the maximum difference between the heights
Given the heights of n towers and a positive integer k, increase or decrease the height of all towers by k (only once).
After modifications, the task is to find the minimum difference between the heights of the tallest and the shortest tower.

Examples: 

Input: arr[] = [12, 6, 4, 15, 17, 10], k = 6
Output: 8
Explanation: Update arr[] as [12 - 6, 6 + 6, 4 + 6, 15 - 6, 17 - 6, 10 - 6] = [6, 12, 10, 9, 11, 4].
Now, the minimum difference is 12 - 4 = 8.

Input: arr[] = [1, 5, 10, 15], k = 3
Output: 8
Explanation: Update arr[] as [1 + 3, 5 + 3, 10 - 3, 15 - 3] = [4, 8, 7, 12]. Now, the minimum difference is 8.

Using Sorting - O(nlogn) Time and O(1) Space
The idea is to sort the array and check the maximum height difference at each index by increasing the height of
towers up to that index and decreasing the height of towers beyond that index.

For any index i, if we add k to all heights in subarray arr[0...i-1] and subtract k from all heights in subarray arr[i...n-1], 
then we know that smallest height = min(arr[0]+k, arr[i]-k) and tallest height = max(arr[i-1]+k, arr[n-1]-k). 
So, the smallest difference between tallest height and smallest height over all indices will be the result.

We can see that for any index i, the smallest height depends on arr[0] and arr[i] and the tallest height depends on arr[i - 1] and arr[n - 1], 
so instead of modifying the subarrays arr[0...i-1] and arr[i...n-1], 
we can simply modify arr[0], arr[i - 1], arr[i] and arr[n - 1] to get the smallest difference between heights.




1
// Java program to minimize the maximum difference
2
// between heights using Sorting
3
​
4
import java.util.Arrays;
5
​
6
class GfG {
7
​
8
    // Function to minimize the maximum difference
9
    static int getMinDiff(int[] arr, int k) {
10
        int n = arr.length;
11
        Arrays.sort(arr);
12
​
13
        // If we increase all heights by k or decrease all
14
        // heights by k, the result will be arr[n - 1] - arr[0]
15
        int res = arr[n - 1] - arr[0];
16
​
17
        // For all indices i, increment arr[0...i-1] by k and
18
        // decrement arr[i...n-1] by k
19
        for (int i = 1; i < arr.length; i++) {
20
​
21
            // Impossible to decrement height of ith tower by k, 
22
            // continue to the next tower
23
            if (arr[i] - k < 0)
24
                continue;
25
​
26
            // Minimum height after modification
27
            int minH = Math.min(arr[0] + k, arr[i] - k);
28
​
29
            // Maximum height after modification
30
            int maxH = Math.max(arr[i - 1] + k, arr[n - 1] - k);
31
​
32
            // Store the minimum difference as result
33
            res = Math.min(res, maxH - minH);
34
        }
35
        return res;
36
    }
37
​
38
    public static void main(String[] args) {
39
        int k = 6;
40
        int[] arr = {12, 6, 4, 15, 17, 10};
41
​
42
        int ans = getMinDiff(arr, k);
43
        System.out.println(ans);
44
    }
45
}

Output
8
Time Complexity: O(nlogn), as we are sorting the array.
Auxiliary Space: O(1)
